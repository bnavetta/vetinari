// JaCoCo Reporting

apply plugin: 'jacoco'

task mergeCodeCoverage(type: JacocoMerge) {
	destinationFile = file("$buildDir/jacoco/merged.exec")

	doFirst {
		executionData -= executionData.filter { !it.exists() }
	}
}

task aggregateCodeCoverageReport(type: JacocoReport) {

	jacocoClasspath = configurations.jacocoAnt

	dependsOn mergeCodeCoverage
	executionData mergeCodeCoverage.destinationFile
	subprojects.each { sub ->
		sourceSets sub.sourceSets.main
	}

	reports {
		html {
			enabled true
			destination file("$buildDir/reports/jacoco/html")
		}
		xml {
			enabled true
			destination file("$buildDir/reports/jacoco/jacocoReport.xml")
		}
	}
}

// Test Reporting

task aggregateTestReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")

	doFirst {
		println testResultDirs as List
	}
}

// Subproject Aggregation

subprojects.each { sub ->
	sub.tasks.withType(Test) { task -> // using withType picks up tasks like integrationTest
		mergeCodeCoverage.executionData task
		aggregateTestReport.reportOn task
	}
}

// Check Task

def checkTask = tasks.findByName('check') ?: tasks.create('check')

checkTask.dependsOn aggregateCodeCoverageReport, aggregateTestReport
